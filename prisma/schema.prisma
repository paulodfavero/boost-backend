generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                 String            @id @default(dbgenerated("nanoid(11)"))
  name               String
  cnpj               String?           @unique
  cpf                String?           @unique
  email              String?           @unique
  created_at         DateTime          @default(now())
  stripe_customer_id String?
  password           String?
  BankTypeAccount    BankTypeAccount[]
  Bank               Bank[]
  Category           Category[]
  Company            Company[]
  Credit             Credit[]
  Expense            Expense[]
  Gain               Gain[]
  Suggestion         Suggestion[]
  User               User[]

  @@map("organizations")
}

model Expense {
  id                        String           @id @default(dbgenerated("nanoid(11)"))
  expiration_date           DateTime
  description               String
  category                  String?
  amount                    Int
  type_payment              String
  installment_current       Int?
  installment_total_payment Int?
  paid                      Boolean          @default(false)
  created_at                DateTime         @default(now())
  company                   String
  bank_transaction_id       String?          @unique
  balance_close_date        DateTime?
  purchase_date             DateTime?
  bankId                    String?
  group_installment_id      String?
  organizationId            String
  bankTypeAccountId         String?
  operation_type            String?
  payment_data              String?
  bank                      Bank?            @relation(fields: [bankId], references: [id])
  bankTypeAccount           BankTypeAccount? @relation(fields: [bankTypeAccountId], references: [id])
  organization              Organization     @relation(fields: [organizationId], references: [id])

  @@map("expenses")
}

model Gain {
  id                        String           @id @default(dbgenerated("nanoid(11)"))
  expiration_date           DateTime
  description               String
  category                  String?
  amount                    Int
  type_payment              String
  installment_current       Int?
  installment_total_payment Int?
  paid                      Boolean          @default(false)
  created_at                DateTime         @default(now())
  company                   String
  group_installment_id      String?
  organizationId            String
  bankId                    String?
  bankTypeAccountId         String?
  bank_transaction_id       String?          @unique
  balance_close_date        DateTime?
  purchase_date             DateTime?
  operation_type            String?
  payment_data              String?
  bank                      Bank?            @relation(fields: [bankId], references: [id])
  bankTypeAccount           BankTypeAccount? @relation(fields: [bankTypeAccountId], references: [id])
  organization              Organization     @relation(fields: [organizationId], references: [id])

  @@map("gains")
}

model Credit {
  id                        String           @id @default(dbgenerated("nanoid(11)"))
  created_at                DateTime         @default(now())
  expiration_date           DateTime
  purchase_date             DateTime?
  balance_close_date        DateTime?
  bank_transaction_id       String?          @unique
  description               String
  company                   String
  category                  String?
  amount                    Int
  type_payment              String
  operation_type            String?
  payment_data              String?
  installment_current       Int?
  installment_total_payment Int?
  paid                      Boolean          @default(false)
  group_installment_id      String?
  organizationId            String
  bankId                    String?
  bankTypeAccountId         String?
  bank                      Bank?            @relation(fields: [bankId], references: [id])
  bankTypeAccount           BankTypeAccount? @relation(fields: [bankTypeAccountId], references: [id])
  organization              Organization     @relation(fields: [organizationId], references: [id])

  @@map("credits")
}

model Category {
  id             String       @id @default(dbgenerated("nanoid(11)"))
  created_at     DateTime     @default(now())
  name           String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("categories")
}

model Company {
  id             String       @id @default(dbgenerated("nanoid(11)"))
  created_at     DateTime     @default(now())
  name           String
  business_name  String?
  category       String?
  cnpj           String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("companies")
}

model Bank {
  id              String            @id @default(dbgenerated("nanoid(11)"))
  created_at      DateTime          @default(now())
  name            String
  type            String
  products        String[]
  status          String
  image_url       String
  institution_url String
  item_id         String            @unique
  last_updated_at DateTime?
  primary_color   String
  has_mfa         Boolean
  organizationId  String
  bankTypeAccount BankTypeAccount[]
  organization    Organization      @relation(fields: [organizationId], references: [id])
  Credit          Credit[]
  expense         Expense[]
  Gain            Gain[]

  @@map("banks")
}

model BankTypeAccount {
  id              String        @id @default(dbgenerated("nanoid(11)"))
  created_at      DateTime      @default(now())
  type            String
  subtype         String
  name            String
  owner           String
  balance         Float
  currency_code   String
  item_id         String
  number          String
  last_updated_at DateTime?
  organizationId  String?
  marketing_name  String?
  tax_number      String?
  bank_data       String?
  account_id      String        @unique
  credit_data     String?
  bankId          String
  bank            Bank          @relation(fields: [bankId], references: [id])
  organization    Organization? @relation(fields: [organizationId], references: [id])
  Credit          Credit[]
  expense         Expense[]
  Gain            Gain[]

  @@map("bankTypeAccount")
}

model User {
  id             String       @id @default(cuid())
  name           String?
  email          String?      @unique
  emailVerified  DateTime?
  image          String?
  organizationId String
  created_at     DateTime     @default(now())
  accounts       Account[]
  sessions       Session[]
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Suggestion {
  id              String       @id @default(dbgenerated("nanoid(11)"))
  created_at      DateTime     @default(now())
  amount_by_month Int
  is_useful       Boolean
  message         String?
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])

  @@map("suggestions")
}

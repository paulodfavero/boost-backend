// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                 String            @id @default(dbgenerated("nanoid(11)"))
  created_at         DateTime          @default(now())
  name               String
  password           String?
  cnpj               String?           @unique
  cpf                String?           @unique
  email              String?           @unique
  stripe_customer_id String?
  User               User[]
  Expense            Expense[]
  Gain               Gain[]
  Category           Category[]
  Company            Company[]
  Bank               Bank[]
  BankTypeAccount    BankTypeAccount[]
  Suggestion         Suggestion[]
  Credit             Credit[]

  @@map("organizations")
}

model Expense {
  id                        String    @id @default(dbgenerated("nanoid(11)"))
  created_at                DateTime  @default(now())
  expiration_date           DateTime
  purchase_date             DateTime?
  balance_close_date        DateTime? //DATE CLOSE BALANCE CREDIT CARD
  bank_transaction_id       String?   @unique //ID of transaction that came from Pluggy
  description               String
  company                   String
  category                  String?
  amount                    Int
  type_payment              String
  operation_type            String?
  payment_data              String?
  installment_current       Int?
  installment_total_payment Int?
  paid                      Boolean   @default(false)
  group_installment_id      String?

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  bank              Bank?            @relation(fields: [bankId], references: [id])
  bankId            String?
  bankTypeAccount   BankTypeAccount? @relation(fields: [bankTypeAccountId], references: [id])
  bankTypeAccountId String?

  @@map("expenses")
}

model Gain {
  id                        String    @id @default(dbgenerated("nanoid(11)"))
  created_at                DateTime  @default(now())
  expiration_date           DateTime
  purchase_date             DateTime?
  balance_close_date        DateTime? //DATE CLOSE BALANCE CREDIT CARD
  bank_transaction_id       String?   @unique //ID of transaction that came from Pluggy
  description               String
  company                   String
  category                  String?
  amount                    Int
  type_payment              String
  operation_type            String?
  payment_data              String?
  installment_current       Int?
  installment_total_payment Int?
  paid                      Boolean   @default(false)
  group_installment_id      String?

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  bank              Bank?            @relation(fields: [bankId], references: [id])
  bankId            String?
  bankTypeAccount   BankTypeAccount? @relation(fields: [bankTypeAccountId], references: [id])
  bankTypeAccountId String?

  @@map("gains")
}

model Credit {
  id                        String    @id @default(dbgenerated("nanoid(11)"))
  created_at                DateTime  @default(now())
  expiration_date           DateTime
  purchase_date             DateTime?
  balance_close_date        DateTime? //DATE CLOSE BALANCE CREDIT CARD
  bank_transaction_id       String?   @unique //ID of transaction that came from Pluggy
  description               String
  company                   String
  category                  String?
  amount                    Int
  type_payment              String
  operation_type            String?
  payment_data              String?
  installment_current       Int?
  installment_total_payment Int?
  paid                      Boolean   @default(false)
  group_installment_id      String?

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  bank              Bank?            @relation(fields: [bankId], references: [id])
  bankId            String?
  bankTypeAccount   BankTypeAccount? @relation(fields: [bankTypeAccountId], references: [id])
  bankTypeAccountId String?

  @@map("credits")
}

model Category {
  id         String   @id @default(dbgenerated("nanoid(11)"))
  created_at DateTime @default(now())
  name       String

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  @@map("categories")
}

model Company {
  id            String   @id @default(dbgenerated("nanoid(11)"))
  created_at    DateTime @default(now())
  name          String
  cnpj          String?
  category      String?
  business_name String?

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  @@map("companies")
}

model Bank {
  id              String    @id @default(dbgenerated("nanoid(11)"))
  created_at      DateTime  @default(now())
  item_id         String    @unique
  name            String
  primary_color   String
  institution_url String
  type            String
  image_url       String
  has_mfa         Boolean
  products        String[]
  status          String
  last_updated_at DateTime?

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  bankTypeAccount BankTypeAccount[]
  expense         Expense[]
  Gain            Gain[]
  Credit          Credit[]

  @@map("banks")
}

model BankTypeAccount {
  id              String       @id @default(dbgenerated("nanoid(11)"))
  created_at      DateTime     @default(now())
  type            String
  subtype         String
  name            String
  marketing_name  String?
  owner           String
  balance         Float
  currency_code   String
  tax_number      String?
  account_id      String       @unique
  item_id         String
  number          String
  last_updated_at DateTime?
  bank_data       String?
  credit_data     String?
  bankId          String? // apenas string opcional, sem relação
  bankItemId      String? // pode ser usado para relação
  bank            Bank?        @relation(fields: [bankItemId], references: [item_id])
  expense         Expense[]
  organization    Organization @relation(fields: [organizationId], references: [id])
  organizationId  String
  Gain            Gain[]
  Credit          Credit[]

  @@map("bankTypeAccount")
}

model User {
  id            String    @id @default(cuid())
  created_at    DateTime  @default(now())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Suggestion {
  id              String   @id @default(dbgenerated("nanoid(11)"))
  created_at      DateTime @default(now())
  amount_by_month Int
  is_useful       Boolean
  message         String?

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  @@map("suggestions")
}
